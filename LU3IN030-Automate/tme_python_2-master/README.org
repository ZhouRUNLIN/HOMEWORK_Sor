#+title: README
#+date: <2023-02-10 mar.>
#+author: Maxime Roméas et Nathalie Sznajder
#+language: fr
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 26.3 (Org mode 9.4)

* Utilisation de GitLab

  /Cette section et les suivantes concernant GitLab sont largement inspirées des documents d’Antoine Miné pour le cours 3I002./

  Pour les TME, vous allez utiliser le logiciel =git= et la plateforme GitLab. Gitlab est un gestionnaire de projets logiciels. =git= est un gestionnaire de versions distribué. GitLab centralise votre projet sur un serveur externe. Il vous permet de garder un historique des modifications (visible avec une interface web), de vous synchroniser avec votre éventuel binôme et de faire le rendu du projet au chargé de TME. Nous y avons ajouté une fonction d’intégration continue : toute propagation des modifications locales vers le serveur GitLab exécutera automatiquement une batterie de tests pour valider votre nouvelle version.

  Pour mettre en place le projet GitLab des TME, vous devrez suivre les étapes suivantes. Faites attention à bien suivre les étapes dans l'ordre. Addressez-vous au chargé de TME en cas de problème.

  
** Vérification de la place disponible (quota)

   Si une des étapes ci-dessous échoue, cela peut être dû à un manque d’espace sur votre compte. Avant toutes choses, utilisez la commande =quota= dans un terminal pour déterminer si votre compte dispose d’espace disponible. En particulier, si la première colonne (=blocks=) est égale à la colonne (=limit=) et une étoile (=*=) apparaît, il ne reste plus de place sur le disque ; vous devez absolument libérer de l’espace avant de continuer.

** Connexion au GitLab

   Normalement, vous avez du recevoir un email du serveur vous précisant les informations de connexion. Si vous n’avez pas reçu cet email, prévenez les enseignants. Ne vous inscrivez pas directement sur le serveur, vous n’aurez pas alors automatiquement accès aux projets des TME du cours.

   Votre /username/ pour la connexion est votre numéro d’étudiant. Lors de votre première connexion, vous devrez choisir un mot de passe.

** Configuration du proxy de navigation (valable uniquement à la PPTI)

   Si la page web du serveur GitLab n’est pas accessible, vous devez configurer le proxy (serveur mandataire) de votre navigateur. Choisissez, pour les protocoles HTTP et HTTPS, le serveur =proxy.ufr-info-p6.jussieu.fr= et le numéro de port 3128.

** Configuration du proxy pour =git= (valable uniquement à la PPTI)

   Afin d'éviter les erreurs d'authentification, vous devez ouvrir un terminal et y taper les commandes suivantes :

   #+begin_src shell
     git config --global http.sslVerify false
     git config --global http.proxy http://proxy.ufr-info-p6.jussieu.fr:3128
     git config --global https.proxy https://proxy.ufr-info-p6.jussieu.fr:3128
   #+end_src

** Configuration des notifications de GitLab

   Il peut être utile de réduire les notifications envoyées par email. Pour cela, dans le menu =Settings= de GitLab, choisissez l’option =Notifications=, ouvrez le menu =Global notification level= et cliquez sur =Custom=. Une liste apparaît, et vous pouvez désélectionner certaines notifications. Nous conseillons en particulier de désélectionner =Failed pipeline= pour éviter d’être submergé de notifications lors de l’intégration continue

** /Fork/ du squelette de projet GitLab

   Vous êtes automatiquement membre du groupe =CALCULABILITE-2023=. Ce groupe contient les projets pour chaque TME, auxquels vous pouvez accéder en lecture seule. Chaque projet est un squelette que vous allez compléter. Il fournit quelques sources : exemples, tests, interfaces, etc. Pour réaliser le TME et compléter ce projet, vous devez d’abord en faire *une copie* (fork) qui sera *privée* et sur laquelle vous allez travailler.
   
*Note* : assurez-vous que votre fenêtre de navigateur occupe tout l’écran. Si la fenêtre est trop petite, certains menus de GitLab sont remplacés par des icônes, et vous ne trouverez plus les noms des menus tels qu’indiqués dans la suite de l’énoncé.

Pour chaque binôme, *un seul d’entre vous* devra faire un /fork/ de ce squelette de projet, puis y ajouter son camarade de binôme, et ainsi partager le projet sous GitLab. Pour cela :

  - Dans l’onglet =Projects > Your projects=, sélectionnez le projet =CALCULABILITE-2023/TME= (où =TME= correspond au nom du projet du TME en cours), cliquez sur le bouton =Fork= puis cliquez sur votre nom. Ceci crée le projet personnel privé nommé =username/TME= (où =username= est votre numéro d’étudiant). Vous travaillerez désormais dans ce projet, où vous avez les droits d’écriture.
  - Dans l’onglet =Projects > Your projects=, sélectionnez ce projet privé. Il doit avoir pour nom =username/TME= et porter la mention =Forked from CALCULABILITE-2023/TME=. Cliquez sur =Settings= dans le menu de gauche, puis =Members=. *Invitez votre binôme* en lui donnant pour rôle =Maintainer=.

    Si c’est votre binôme qui a créé le projet et vous y a ajouté avec les bons droits, vous devriez le trouver dans l’onglet =Projects > Your projects= sous le nom =partnername/TME= où =partnername= est le numéro d’étudiant de votre binôme.

** Ajout du chargé de TME à votre projet GitLab

   Dans votre projet personnel sur GitLab, =username/TME=, invitez également votre chargé TME avec le rôle =Maintainer= (même procédure que ci-dessus). Si vous n’ajoutez pas votre chargé de TME, celui-ci ne pourra pas suivre l’avancement de votre travail, ni vous donner une note le cas échéant.
   
** Faire une copie locale de votre projet

   Pour travailler sur votre projet, vous devez effectuer une copie locale sur votre machine. Tous les membres du projet peuvent faire une copie locale. Ensuite, vous devez régulièrement synchroniser la version sur le serveur avec le travail que vous avez effectué localement. Cela vous permet à plusieurs personnes de travailler simultanément, sur des ordinateurs différents, et de partager et d’échanger les sources développées.

   Pour effectuer une copie locale de votre projet, vous devez d’abord récupérer l’adresse du projet. Vous la trouverez sur la page GitLab de votre projet, en cliquant sur l’icône =Clone= à côté du bouton =Fork=. Copiez la chaîne de caractères sous =Clone with HTTPS=.

   *Prenez garde* à bien importer votre projet de binôme, =username/TME=, et pas =CALCULABILITE-2023/TME=. Vous ne pourrez pas travailler dans ce dernier, qui est en lecture seule.

   Utilisez votre terminal pour vous rendre dans le repertoire où vous souhaitez copier le projet. Puis entrez la commande =git clone adresse-du-projet=, où =adresse-du-projet= est l’adresse que vous avez récupérée.
   
Vous devez entrer un nom d’utilisateur et le mot de passe associé. Le nom d’utilisateur est votre username sur le serveur GitLab, c’est-à-dire votre numéro d’étudiant (i.e., la personne qui fait l’import, pas forcément la personne qui a fait le /fork/) ; le mot de passe est celui que vous avez choisi en vous connectant au serveur GitLab la première fois.

Cette action va créer un répertoire =TME= contenant votre copie locale du projet.

Ne modifiez pas les fichiers =test-*.py= qui servent de tests automatiques.

Vous pouvez désormais commencer à travailler sur votre copie locale du projet.

** Synchronisation avec le serveur GitLab

   Après avoir exécuté =git clone= en début de TME, nous avons travaillé sur une copie locale du projet. Il est nécessaire de synchroniser périodiquement votre projet local avec le projet GitLab pour :
   
   - communiquer vos fichiers à l’enseignant pour le rendu (celui-ci a accès aux fichiers sous GitLab, mais pas à ceux sur votre compte local),
   - vous synchroniser avec votre binôme,
   - éventuellement synchroniser des copies locales sur plusieurs ordinateurs,
   - garder une trace des modifications et pouvoir éventuellement revenir à une version précédente en cas d’erreur.

   Les opérations utiles sont donc la propagation d’une copie locale vers le serveur (/push/) et depuis le serveur vers une copie locale (/pull/).

Vous pouvez consulter l’état des fichiers sur le serveur GitLab en utilisant le site web https://stl.algo-prog.info. Vous y trouverez la dernière version des fichiers et l’historique des modifications. Vous pourrez en particulier vérifier que le projet a bien été synchronisé pour le rendu de TME.

** =git= en ligne de commande

   Dans un terminal, placez-vous dans le répertoire =TME= contenant votre projet. Les commandes les plus utiles sont :
   - =git status= pour connaître l’état actuel de vos fichiers, en particulier ce qui a été modifié depuis la dernière synchronisation avec le serveur ;
   - =git add fichiers= pour indiquer les fichiers ajoutés ou modifiés localement ;
   - =git commit -m "mon message"= pour enregistrer localement les ajouts ou modifications des fichiers spécifiés par =git add=, où /mon message/ est un commentaire de votre part qui spécifie les modifications ;
   - =git push= pour effectivement propager l’enregistrement local vers le serveur ;
   - =git pull= pour rapatrier localement les modifications depuis le serveur.

   Le système =git= est décrit dans le livre en ligne : https://git-scm.com/book/en/v2.

** Bonnes pratiques

   C’est une bonne idée d’anticiper les conflits en *commençant toute session de travail par un pull*, pour repartir avec les dernières versions des fichiers disponibles sur le serveur, et en *terminant toute session de travail par un push*, pour que vos modifications locales soient envoyées sur le serveur et puissent être importées par votre binôme ou vous-même sur un autre ordinateur.

** Gestion des conflits

   Si des modifications ont été faites sur le serveur (par exemple par une propagation, =push=, de votre camarade) depuis votre dernier =pull=, vous ne pourrez pas propager vos modifications locales directement ; =git= refusera avec une erreur.

   En effet, cela provoquerait des conflits entre deux nouvelles versions d’un fichier. =git= vous force à résoudre les conflits localement, avant de propager vos fichiers corrigés vers le serveur :

   — Faites d’abord un =pull=.
   — =git= s’efforce de fusionner les modifications locales avec celles présentes sur le serveur, mais il a pu faire des erreurs ; vous devez examiner chaque fichier et corriger à la main les problèmes causés par la fusion. Les zones non fusionnées sont identifiées par des balises =<<<<<<=, =------= et =>>>>>>= dans votre source Python. =git= vous indique de cette manière les deux versions disponibles (version locale et dernière version disponible sur le serveur). Il s’agit souvent de choisir une de deux versions, en supprimant les lignes redondantes et les balises.
   — Après suppression de tous les conflits, vous devez faire un =commit= avec les fichiers concernés.
   — Vous pouvez enfin faire un =push=.

** Tests et intégration continue sous GitLab

   L’intégration continue est une pratique de développement logiciel consistant à s’assurer que, à chaque instant, le dépôt est correct et passe tous les tests. Le serveur GitLab est configuré pour l’intégration continue : *après chaque propagation de votre copie locale vers le serveur (push), des tests sont exécutés automatiquement.*

   Vous pouvez consulter le résultat des tests sur le serveur GitLab https://stl.algo-prog.info en cliquant sur votre projet, puis dans le menu à gauche sur =CI / CD > pipelines=. Les tests de la dernière version apparaissent en haut. Un icône « V » vert ou une croix rouge indique l’état du test (un croissant ou un symbole pause indique que le test est en cours ou en attente, il faut donc patienter). Cliquer sur l’icône dans la colonne =Status= permet de voir l’ensemble des classes de test. Cliquer sur un nom de test vous donne un rapport complet de test, indiquant en particulier quelles méthodes de test ont échoué, et avec quelles erreurs.

   Le chargé de TME a accès aux rapports de tests sur le serveur GitLab, ce qui lui permet d’évaluer votre rendu de TME.

   Le serveur est configuré pour exécuter tous les tests du TME. *Tant que vous n’avez pas programmé toutes les fonctions demandées, de nombreux tests vont échouer. Vous ignorerez donc au départ les tests liés aux questions que vous n’avez pas encore traitées.*

   Vous pouvez effectuer les tests au niveau local, avant de propager votre version du projet. Pour lancer les tests localement il suffit d’utiliser la commande =./test-all.sh=. Vous pouvez également executer chaque test séparément avec la commande =python test-N-*.py= où $N$ est le numéro du test que vous souhaitez effectuer.

   *Nous vous recommandons d’effectuer les tests au niveau local avant de propager votre version du projet, afin de vous assurer qu’il ne reste pas d’erreurs.*

** Rendu du TME

  

   Chaque semaine, il est obligatoire de rendre le TME à votre chargé de TME en fin de la séance. Si vous le souhaitez, vous pouvez aussi rendre *une seconde version améliorée avant le début du TME suivant.*

   Le rendu se fait en propageant vos modifications vers le serveur GitLab, comme indiqué plus haut, et, idéalement, en y associant un /tag/ pour que vous et vos enseignants puissiez mieux vous y retrouver. Pour cela :
   — Connectez-vous sur la page de votre projet sous https://stl.algo-prog.info.
   — Assurez-vous que votre chargé de TME est membre de votre projet, avec le rôle =Maintainer=.
   — Vérifiez que toutes les classes demandées sont bien présentes sous GitLab et bien synchronisées avec le projet local.
   — Vérifiez également que les tests unitaires du TME lancés par l’intégration continue sur le serveur GitLab se sont exécutés correctement.
   — Dans le menu de gauche, sélectionnez =Repository > Tags= et cliquez sur =New Tag=.
   — Donnez un nom à votre /tag/ : « rendu-fin-seance1 » ou « rendu-apres-seance1 », selon qu’il s’agit d’un rendu partiel en fin de la séance 1 ou bien d’un rendu du TME plus tard dans la semaine.
   — Cliquez sur =Create tag=.
   — En cas d’erreur, il est toujours possible de créer un nouveau tag. Pensez à donner un nom explicite.

   *Il est fortement recommandé de créer un tag pour chaque rendu, et de réaliser au moins un rendu par séance.*

** Mettre à jour sa version du TME

   Si un ou plusieurs fichiers du TME venaient à être modifiés (par exemple à cause de bugs dans le code ou les tests, ...) vous pourrez mettre à jour votre projet de TME sans perdre votre travail en effectuant les commandes suivantes.

   Pour la première commande, qui suit, il n'est utile de la lancer qu'une seule fois. Vous n'aurez donc pas à la refaire à chaque modification du sujet de TME.

   #+begin_src shell
     # Seulement la première fois
     git remote add upstream https://stl.algo-prog.info/calculabilite2023/tme_python_2
   #+end_src

   Pour les suivantes, elles devront être effectuées à chaque modification du sujet de TME.

   #+begin_src shell
     # À chaque modification
     git fetch upstream
     git merge upstream/master -m "Merge upstream"
   #+end_src
